diff --git a/Src/PRuntimes/CoyoteRuntime/Values/IPrtValue.cs b/Src/PRuntimes/CoyoteRuntime/Values/IPrtValue.cs
index d539dee11..d9203f833 100644
--- a/Src/PRuntimes/CoyoteRuntime/Values/IPrtValue.cs
+++ b/Src/PRuntimes/CoyoteRuntime/Values/IPrtValue.cs
@@ -1,4 +1,5 @@
 ï»¿using System;
+using System.Collections.Generic;
 
 namespace Plang.CoyoteRuntime.Values
 {
diff --git a/Src/PRuntimes/CoyoteRuntime/Values/PMachineValue.cs b/Src/PRuntimes/CoyoteRuntime/Values/PMachineValue.cs
index 21c9d3952..30ec61964 100644
--- a/Src/PRuntimes/CoyoteRuntime/Values/PMachineValue.cs
+++ b/Src/PRuntimes/CoyoteRuntime/Values/PMachineValue.cs
@@ -38,6 +38,11 @@ namespace Plang.CoyoteRuntime.Values
             return Id.GetHashCode();
         }
 
+        public override bool Equals(object obj)
+        {
+            return base.Equals((IPrtValue)obj);
+        }
+       
         public IPrtValue Clone()
         {
             return new PMachineValue(Id, new List<string>(Permissions));
diff --git a/Src/PRuntimes/CoyoteRuntime/Values/PrtMap.cs b/Src/PRuntimes/CoyoteRuntime/Values/PrtMap.cs
index 5321be11a..8d2dade9e 100644
--- a/Src/PRuntimes/CoyoteRuntime/Values/PrtMap.cs
+++ b/Src/PRuntimes/CoyoteRuntime/Values/PrtMap.cs
@@ -158,6 +158,11 @@ namespace Plang.CoyoteRuntime.Values
             return new PrtSeq(map.Values.Select(v => v.Clone()));
         }
 
+        public override bool Equals(object obj)
+        {
+            return base.Equals((IPrtValue)obj);
+        }
+
         public override int GetHashCode()
         {
             if (IsDirty)
diff --git a/Src/PRuntimes/CoyoteRuntime/Values/PrtSet.cs b/Src/PRuntimes/CoyoteRuntime/Values/PrtSet.cs
index a7e5207fc..ee52617ed 100644
--- a/Src/PRuntimes/CoyoteRuntime/Values/PrtSet.cs
+++ b/Src/PRuntimes/CoyoteRuntime/Values/PrtSet.cs
@@ -77,6 +77,22 @@ namespace Plang.CoyoteRuntime.Values
                    && set.SetEquals(otherSet.set);
         }
 
+        public override bool Equals(object obj)
+        {
+            return base.Equals((IPrtValue)obj);
+        }
+
+        public override int GetHashCode()
+        {
+            if (IsDirty)
+            {
+                hashCode = ComputeHashCode();
+                IsDirty = false;
+            }
+
+            return hashCode;
+        }
+
         public IPrtValue Clone()
         {
             PrtSet clone = new PrtSet(new HashSet<IPrtValue>());
diff --git a/Src/PRuntimes/CoyoteRuntime/Values/PrtTuple.cs b/Src/PRuntimes/CoyoteRuntime/Values/PrtTuple.cs
index 21fd298b8..ae269039e 100644
--- a/Src/PRuntimes/CoyoteRuntime/Values/PrtTuple.cs
+++ b/Src/PRuntimes/CoyoteRuntime/Values/PrtTuple.cs
@@ -69,6 +69,11 @@ namespace Plang.CoyoteRuntime.Values
             return true;
         }
 
+        public override bool Equals(object obj)
+        {
+            return base.Equals((IPrtValue)obj);
+        }
+
         public void Update(int index, IPrtValue val)
         {
             fieldValues[index] = val;
@@ -161,6 +166,11 @@ namespace Plang.CoyoteRuntime.Values
             return true;
         }
 
+        public override bool Equals(object obj)
+        {
+            return base.Equals((IPrtValue)obj);
+        }
+
         public override int GetHashCode()
         {
             int hashCode = HashHelper.ComputeHash<IPrtValue>(fieldValues);
