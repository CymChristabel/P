Dequeue semantics: See deferred_set and receive_set definitions PrtBaseClasses.cs, near line 655.

It should be:

Msg pick(Set<Msg> S):
  return ( S == empty ? NULL : non-deterministic element of S );

Msg Dequeue():
{
  if receive_set == empty:
    if head \not\in deferred:
      return head
  else
    if head in receive_set:
      return head

  if receive_set == empty:
    return pick(tail - deferred_set)
  else
    return pick(tail /\ receive_set)

  return NULL;
}

Simplified:

Msg Dequeue():
{
  if head in receive_set || ( receive_set == empty && head \not\in deferred ):
    return head;

  if receive_set == empty:
    return pick(tail - deferred_set)
  else
    return pick(tail /\ receive_set)

  return NULL;
}


So receive_set somehow has priority over deferred_set:

if the former is non-empty, ignore the latter.
if the former is     empty, ignore the former (and use the latter).

Note that Dequeue operates in a loop, which normally may dequeue multiple
messages in one execution step. We have disabled this for now.

---------------------------------------------------------------------------

- asynchrony: can RECV and SEND actions happen simultaneously?

When a message is sent, it is enqueued at the receiver's side at the same time.
I doubt a message can be sent, enqueued and dequeued by the receiver all in one step.
